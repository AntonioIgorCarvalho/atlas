{"ast":null,"code":"var _jsxFileName = \"/Users/leonardogomes/Documents/atlas/atlas/src/components/Map/hook/useStateLayer/stateActions.tsx\";\nimport React from 'react';\nimport * as turf from '@turf/turf';\nimport ReactDOM from 'react-dom';\nimport { clickedPopup, hoveredPopup } from '../../const';\nimport ClickablePopup from '@components/Map/components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet hoveredId;\nlet clickedId;\n\nfunction addPopup(feature, map, type) {\n  var _feature$properties;\n\n  const regionName = feature === null || feature === void 0 ? void 0 : (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.NM_UF;\n  const coordinates = turf.centerOfMass(feature).geometry.coordinates;\n  const placeholder = document.createElement('div');\n\n  switch (type) {\n    case 'hover':\n      hoveredPopup.trackPointer().setHTML(`<h5>${regionName}</h5>`).addTo(map);\n      break;\n\n    case 'click':\n      if (regionName) {\n        ReactDOM.render( /*#__PURE__*/_jsxDEV(ClickablePopup, {\n          regionName: regionName,\n          reference: map,\n          feature: feature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), placeholder);\n        clickedPopup.setLngLat([coordinates[0], coordinates[1]]).setDOMContent(placeholder).addTo(map);\n      }\n\n      break;\n  }\n}\n\nfunction setFeatureHover(featureID, map, state) {\n  map.setFeatureState({\n    source: 'state',\n    id: featureID\n  }, {\n    hover: state\n  });\n}\n\nfunction setFeatureClick(featureID, map, state) {\n  map.setFeatureState({\n    source: 'state',\n    id: featureID\n  }, {\n    hover: state\n  });\n}\n\nexport function clickState(feature, map) {\n  var _feature$properties2;\n\n  const stateID = feature === null || feature === void 0 ? void 0 : (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === clickedId) {\n      return;\n    }\n\n    addPopup(feature, map, 'click');\n\n    if (clickedId) {\n      setFeatureClick(clickedId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureClick(stateID, map, true);\n      clickedId = stateID;\n    }\n  } else if (clickedId) {\n    if (map.getSource('state')) {\n      setFeatureClick(clickedId, map, false);\n    }\n\n    clickedId = undefined;\n  }\n}\nexport function highlightState(feature, map) {\n  var _feature$properties3;\n\n  const stateID = feature === null || feature === void 0 ? void 0 : (_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === hoveredId) {\n      return;\n    }\n\n    addPopup(feature, map, 'hover');\n\n    if (hoveredId) {\n      setFeatureHover(hoveredId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureHover(stateID, map, true);\n      hoveredId = stateID;\n    }\n  } else if (hoveredId) {\n    hoveredPopup.remove();\n\n    if (map.getSource('state')) {\n      setFeatureHover(hoveredId, map, false);\n    }\n\n    hoveredId = undefined;\n  }\n}\nexport function isStateLayerVisible(map, visible) {\n  const visibility = visible ? 'visible' : 'none';\n\n  if (map.getLayer('fill-state')) {\n    map.setLayoutProperty('fill-state', 'visibility', visibility);\n  }\n\n  if (map.getLayer('state-borders')) {\n    map.setLayoutProperty('state-borders', 'visibility', visibility);\n  }\n}\nexport function cleanStateActions() {\n  hoveredPopup.remove();\n  clickedPopup.remove();\n  clickedId = 0;\n  hoveredId = undefined;\n}\nexport function fitStateBounds(feature, map) {\n  if (feature && (feature.geometry || feature._geometry)) {\n    const [minX, minY, maxX, maxY] = turf.bbox(feature);\n    map.fitBounds([[minX, minY], [maxX, maxY]], {\n      padding: {\n        top: 100,\n        bottom: 100,\n        left: 200,\n        right: 200\n      }\n    });\n  }\n}","map":{"version":3,"names":["React","turf","ReactDOM","clickedPopup","hoveredPopup","ClickablePopup","hoveredId","clickedId","addPopup","feature","map","type","regionName","properties","NM_UF","coordinates","centerOfMass","geometry","placeholder","document","createElement","trackPointer","setHTML","addTo","render","setLngLat","setDOMContent","setFeatureHover","featureID","state","setFeatureState","source","id","hover","setFeatureClick","clickState","stateID","CD_UF","getSource","undefined","highlightState","remove","isStateLayerVisible","visible","visibility","getLayer","setLayoutProperty","cleanStateActions","fitStateBounds","_geometry","minX","minY","maxX","maxY","bbox","fitBounds","padding","top","bottom","left","right"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Map/hook/useStateLayer/stateActions.tsx"],"sourcesContent":["import React from 'react';\nimport * as turf from '@turf/turf';\nimport mapboxgl from 'mapbox-gl';\nimport ReactDOM from 'react-dom';\n\nimport { State } from '@customTypes/feature';\n\nimport { clickedPopup, hoveredPopup } from '../../const';\nimport ClickablePopup from '@components/Map/components';\n\nlet hoveredId: number | undefined;\nlet clickedId: number | undefined;\n\ntype Feature = State | null;\n\nfunction addPopup(feature: Feature, map: mapboxgl.Map, type: string) {\n  const regionName = feature?.properties?.NM_UF;\n  const coordinates = turf.centerOfMass(feature).geometry.coordinates;\n  const placeholder = document.createElement('div');\n\n  switch (type) {\n    case 'hover':\n      hoveredPopup.trackPointer().setHTML(`<h5>${regionName}</h5>`).addTo(map);\n\n      break;\n    case 'click':\n      if (regionName) {\n        ReactDOM.render(<ClickablePopup regionName={regionName} reference={map} feature={feature} />, placeholder);\n\n        clickedPopup.setLngLat([coordinates[0], coordinates[1]]).setDOMContent(placeholder).addTo(map);\n      }\n\n      break;\n  }\n}\n\nfunction setFeatureHover(featureID: number, map: mapboxgl.Map, state: boolean) {\n  map.setFeatureState({ source: 'state', id: featureID }, { hover: state });\n}\n\nfunction setFeatureClick(featureID: number, map: mapboxgl.Map, state: boolean) {\n  map.setFeatureState({ source: 'state', id: featureID }, { hover: state });\n}\n\nexport function clickState(feature: Feature, map: mapboxgl.Map) {\n  const stateID = feature?.properties?.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === clickedId) {\n      return;\n    }\n    addPopup(feature, map, 'click');\n\n    if (clickedId) {\n      setFeatureClick(clickedId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureClick(stateID, map, true);\n      clickedId = stateID;\n    }\n  } else if (clickedId) {\n    if (map.getSource('state')) {\n      setFeatureClick(clickedId, map, false);\n    }\n    clickedId = undefined;\n  }\n}\n\nexport function highlightState(feature: Feature, map: mapboxgl.Map) {\n  const stateID = feature?.properties?.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === hoveredId) {\n      return;\n    }\n\n    addPopup(feature, map, 'hover');\n\n    if (hoveredId) {\n      setFeatureHover(hoveredId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureHover(stateID, map, true);\n      hoveredId = stateID;\n    }\n  } else if (hoveredId) {\n    hoveredPopup.remove();\n\n    if (map.getSource('state')) {\n      setFeatureHover(hoveredId, map, false);\n    }\n    hoveredId = undefined;\n  }\n}\n\nexport function isStateLayerVisible(map: mapboxgl.Map, visible: boolean) {\n  const visibility = visible ? 'visible' : 'none';\n\n  if (map.getLayer('fill-state')) {\n    map.setLayoutProperty('fill-state', 'visibility', visibility);\n  }\n\n  if (map.getLayer('state-borders')) {\n    map.setLayoutProperty('state-borders', 'visibility', visibility);\n  }\n}\n\nexport function cleanStateActions() {\n  hoveredPopup.remove();\n  clickedPopup.remove();\n  clickedId = 0;\n  hoveredId = undefined;\n}\n\nexport function fitStateBounds(feature: Feature, map: mapboxgl.Map) {\n  if (feature && (feature.geometry || feature._geometry)) {\n    const [minX, minY, maxX, maxY] = turf.bbox(feature);\n\n    map.fitBounds(\n      [\n        [minX, minY],\n        [maxX, maxY],\n      ],\n      {\n        padding: { top: 100, bottom: 100, left: 200, right: 200 },\n      },\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}