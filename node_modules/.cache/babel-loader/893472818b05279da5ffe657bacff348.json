{"ast":null,"code":"export function getColorFromGradient(min, max, value) {\n  const minColor = stringToColor(min);\n  const maxColor = stringToColor(max);\n\n  const getRGBColor = color => {\n    return Math.round((maxColor[color] - minColor[color]) * value + minColor[color]);\n  };\n\n  const gradient = {\n    red: getRGBColor('red'),\n    green: getRGBColor('green'),\n    blue: getRGBColor('blue')\n  };\n  const result = `rgb(${Object.values(gradient).join(',')})`;\n  return result;\n}\nexport function lightOrDark(color) {\n  const rgb = stringToColor(color);\n  const hsp = Math.sqrt(0.299 * (rgb.red * rgb.red) + 0.587 * (rgb.green * rgb.green) + 0.114 * (rgb.blue * rgb.blue));\n\n  if (hsp > 127.5) {\n    return 'black';\n  } else {\n    return 'white';\n  }\n}\n\nconst stringToColor = rgb => {\n  const array = rgb.replace(/rgba?\\((.*)\\)/, '$1').split(',');\n  const color = {\n    red: Number(array[0]),\n    green: Number(array[1]),\n    blue: Number(array[2])\n  };\n  return color;\n};","map":{"version":3,"names":["getColorFromGradient","min","max","value","minColor","stringToColor","maxColor","getRGBColor","color","Math","round","gradient","red","green","blue","result","Object","values","join","lightOrDark","rgb","hsp","sqrt","array","replace","split","Number"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/utils/colorManipulator.ts"],"sourcesContent":["export function getColorFromGradient(min: string, max: string, value: number) {\n  const minColor = stringToColor(min);\n  const maxColor = stringToColor(max);\n\n  const getRGBColor = (color: 'red' | 'green' | 'blue') => {\n    return Math.round((maxColor[color] - minColor[color]) * value + minColor[color]);\n  };\n\n  const gradient = {\n    red: getRGBColor('red'),\n    green: getRGBColor('green'),\n    blue: getRGBColor('blue'),\n  };\n\n  const result = `rgb(${Object.values(gradient).join(',')})`;\n  return result;\n}\n\nexport function lightOrDark(color: string) {\n  const rgb = stringToColor(color);\n\n  const hsp = Math.sqrt(0.299 * (rgb.red * rgb.red) + 0.587 * (rgb.green * rgb.green) + 0.114 * (rgb.blue * rgb.blue));\n\n  if (hsp > 127.5) {\n    return 'black';\n  } else {\n    return 'white';\n  }\n}\n\nconst stringToColor = (rgb: string) => {\n  const array = rgb.replace(/rgba?\\((.*)\\)/, '$1').split(',');\n  const color = {\n    red: Number(array[0]),\n    green: Number(array[1]),\n    blue: Number(array[2]),\n  };\n  return color;\n};\n"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,GAA9B,EAA2CC,GAA3C,EAAwDC,KAAxD,EAAuE;EAC5E,MAAMC,QAAQ,GAAGC,aAAa,CAACJ,GAAD,CAA9B;EACA,MAAMK,QAAQ,GAAGD,aAAa,CAACH,GAAD,CAA9B;;EAEA,MAAMK,WAAW,GAAIC,KAAD,IAAqC;IACvD,OAAOC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,CAACE,KAAD,CAAR,GAAkBJ,QAAQ,CAACI,KAAD,CAA3B,IAAsCL,KAAtC,GAA8CC,QAAQ,CAACI,KAAD,CAAjE,CAAP;EACD,CAFD;;EAIA,MAAMG,QAAQ,GAAG;IACfC,GAAG,EAAEL,WAAW,CAAC,KAAD,CADD;IAEfM,KAAK,EAAEN,WAAW,CAAC,OAAD,CAFH;IAGfO,IAAI,EAAEP,WAAW,CAAC,MAAD;EAHF,CAAjB;EAMA,MAAMQ,MAAM,GAAI,OAAMC,MAAM,CAACC,MAAP,CAAcN,QAAd,EAAwBO,IAAxB,CAA6B,GAA7B,CAAkC,GAAxD;EACA,OAAOH,MAAP;AACD;AAED,OAAO,SAASI,WAAT,CAAqBX,KAArB,EAAoC;EACzC,MAAMY,GAAG,GAAGf,aAAa,CAACG,KAAD,CAAzB;EAEA,MAAMa,GAAG,GAAGZ,IAAI,CAACa,IAAL,CAAU,SAASF,GAAG,CAACR,GAAJ,GAAUQ,GAAG,CAACR,GAAvB,IAA8B,SAASQ,GAAG,CAACP,KAAJ,GAAYO,GAAG,CAACP,KAAzB,CAA9B,GAAgE,SAASO,GAAG,CAACN,IAAJ,GAAWM,GAAG,CAACN,IAAxB,CAA1E,CAAZ;;EAEA,IAAIO,GAAG,GAAG,KAAV,EAAiB;IACf,OAAO,OAAP;EACD,CAFD,MAEO;IACL,OAAO,OAAP;EACD;AACF;;AAED,MAAMhB,aAAa,GAAIe,GAAD,IAAiB;EACrC,MAAMG,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,eAAZ,EAA6B,IAA7B,EAAmCC,KAAnC,CAAyC,GAAzC,CAAd;EACA,MAAMjB,KAAK,GAAG;IACZI,GAAG,EAAEc,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN,CADC;IAEZV,KAAK,EAAEa,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN,CAFD;IAGZT,IAAI,EAAEY,MAAM,CAACH,KAAK,CAAC,CAAD,CAAN;EAHA,CAAd;EAKA,OAAOf,KAAP;AACD,CARD"},"metadata":{},"sourceType":"module"}