{"ast":null,"code":"export const formatPopulationNumber = value => {\n  const valueStr = value.toString();\n  const src = valueStr.replace(/[^\\d/]/g, '');\n  const numbers = src.replace(/[^\\d]/g, '');\n  const out = [];\n\n  for (let i = numbers.length - 1, j = 1; i >= 0; i--, j++) {\n    out.push(numbers[i]);\n\n    if (j % 3 === 0 && i !== 0) {\n      out.push(',');\n    }\n  }\n\n  out.reverse();\n  const outString = out.join('');\n  return outString;\n};\nexport const formatValue = (value, format) => {\n  if (value === undefined || value === null) {\n    return 'n/a';\n  }\n\n  switch (format) {\n    case 'population':\n      return formatPopulationNumber(value);\n\n    case 'percent':\n      return `${Math.floor(parseFloat(value))}%`;\n\n    case 'percent_normalized':\n      return `${(value * 100.0).toFixed(2)}%`;\n\n    case 'float_2':\n      return value ? `${parseFloat(String(value).replace(/,/g, '.')).toFixed(2)}` : '';\n\n    case 'float_3':\n      return value ? `${parseFloat(String(value).replace(/,/g, '.')).toFixed(3)}` : '';\n\n    default:\n      return value ? value + '' : '-';\n  }\n};","map":{"version":3,"names":["formatPopulationNumber","value","valueStr","toString","src","replace","numbers","out","i","length","j","push","reverse","outString","join","formatValue","format","undefined","Math","floor","parseFloat","toFixed","String"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/utils/formatValue.ts"],"sourcesContent":["export const formatPopulationNumber = (value: any) => {\n  const valueStr = value.toString();\n  const src = valueStr.replace(/[^\\d/]/g, '');\n  const numbers = src.replace(/[^\\d]/g, '');\n  const out: any = [];\n\n  for (let i = numbers.length - 1, j = 1; i >= 0; i--, j++) {\n    out.push(numbers[i]);\n    if (j % 3 === 0 && i !== 0) {\n      out.push(',');\n    }\n  }\n\n  out.reverse();\n  const outString = out.join('');\n  return outString;\n};\n\nexport const formatValue = (value: any, format: string) => {\n  if (value === undefined || value === null) {\n    return 'n/a';\n  }\n\n  switch (format) {\n    case 'population':\n      return formatPopulationNumber(value);\n    case 'percent':\n      return `${Math.floor(parseFloat(value))}%`;\n    case 'percent_normalized':\n      return `${(value * 100.0).toFixed(2)}%`;\n    case 'float_2':\n      return value ? `${parseFloat(String(value).replace(/,/g, '.')).toFixed(2)}` : '';\n    case 'float_3':\n      return value ? `${parseFloat(String(value).replace(/,/g, '.')).toFixed(3)}` : '';\n    default:\n      return value ? value + '' : '-';\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAIC,KAAD,IAAgB;EACpD,MAAMC,QAAQ,GAAGD,KAAK,CAACE,QAAN,EAAjB;EACA,MAAMC,GAAG,GAAGF,QAAQ,CAACG,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAZ;EACA,MAAMC,OAAO,GAAGF,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAhB;EACA,MAAME,GAAQ,GAAG,EAAjB;;EAEA,KAAK,IAAIC,CAAC,GAAGF,OAAO,CAACG,MAAR,GAAiB,CAAzB,EAA4BC,CAAC,GAAG,CAArC,EAAwCF,CAAC,IAAI,CAA7C,EAAgDA,CAAC,IAAIE,CAAC,EAAtD,EAA0D;IACxDH,GAAG,CAACI,IAAJ,CAASL,OAAO,CAACE,CAAD,CAAhB;;IACA,IAAIE,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeF,CAAC,KAAK,CAAzB,EAA4B;MAC1BD,GAAG,CAACI,IAAJ,CAAS,GAAT;IACD;EACF;;EAEDJ,GAAG,CAACK,OAAJ;EACA,MAAMC,SAAS,GAAGN,GAAG,CAACO,IAAJ,CAAS,EAAT,CAAlB;EACA,OAAOD,SAAP;AACD,CAhBM;AAkBP,OAAO,MAAME,WAAW,GAAG,CAACd,KAAD,EAAae,MAAb,KAAgC;EACzD,IAAIf,KAAK,KAAKgB,SAAV,IAAuBhB,KAAK,KAAK,IAArC,EAA2C;IACzC,OAAO,KAAP;EACD;;EAED,QAAQe,MAAR;IACE,KAAK,YAAL;MACE,OAAOhB,sBAAsB,CAACC,KAAD,CAA7B;;IACF,KAAK,SAAL;MACE,OAAQ,GAAEiB,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACnB,KAAD,CAArB,CAA8B,GAAxC;;IACF,KAAK,oBAAL;MACE,OAAQ,GAAE,CAACA,KAAK,GAAG,KAAT,EAAgBoB,OAAhB,CAAwB,CAAxB,CAA2B,GAArC;;IACF,KAAK,SAAL;MACE,OAAOpB,KAAK,GAAI,GAAEmB,UAAU,CAACE,MAAM,CAACrB,KAAD,CAAN,CAAcI,OAAd,CAAsB,IAAtB,EAA4B,GAA5B,CAAD,CAAV,CAA6CgB,OAA7C,CAAqD,CAArD,CAAwD,EAA9D,GAAkE,EAA9E;;IACF,KAAK,SAAL;MACE,OAAOpB,KAAK,GAAI,GAAEmB,UAAU,CAACE,MAAM,CAACrB,KAAD,CAAN,CAAcI,OAAd,CAAsB,IAAtB,EAA4B,GAA5B,CAAD,CAAV,CAA6CgB,OAA7C,CAAqD,CAArD,CAAwD,EAA9D,GAAkE,EAA9E;;IACF;MACE,OAAOpB,KAAK,GAAGA,KAAK,GAAG,EAAX,GAAgB,GAA5B;EAZJ;AAcD,CAnBM"},"metadata":{},"sourceType":"module"}