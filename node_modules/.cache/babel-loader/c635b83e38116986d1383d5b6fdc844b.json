{"ast":null,"code":"var _jsxFileName = \"/Users/leonardogomes/Documents/atlas/atlas/src/components/MetricDetails/MetricDetails.tsx\";\nimport React from 'react';\nimport Bar from './Bar';\nimport geosesData from '../../data/Data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MetricDetails = _ref => {\n  let {\n    district,\n    metric\n  } = _ref;\n\n  const renderSingleMetric = () => {\n    // @ts-ignore\n    const rawValue = geosesData[district === null || district === void 0 ? void 0 : district.properties.CD_MUN][metric.label];\n    const value = metric.format(rawValue);\n\n    switch (metric.type) {\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          rawValue: rawValue,\n          metric: metric,\n          id: district.properties.CD_MUN\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 16\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"data\", {\n            value: rawValue,\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this)\n        }, district.properties.CD_MUN, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderSingleMetric()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n_c = MetricDetails;\nexport default MetricDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetricDetails\");","map":{"version":3,"names":["React","Bar","geosesData","MetricDetails","district","metric","renderSingleMetric","rawValue","properties","CD_MUN","label","value","format","type"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/MetricDetails/MetricDetails.tsx"],"sourcesContent":["import React from 'react';\n\nimport Bar from './Bar';\nimport geosesData from '../../data/Data.json';\n\nconst MetricDetails = ({ district, metric }: any) => {\n  const renderSingleMetric = () => {\n    // @ts-ignore\n    const rawValue = geosesData[district?.properties.CD_MUN][metric.label];\n    const value = metric.format(rawValue);\n\n    switch (metric.type) {\n      case 'bar':\n        return <Bar rawValue={rawValue} metric={metric} id={district.properties.CD_MUN} />;\n      default:\n        return (\n          <div key={district.properties.CD_MUN}>\n            <data value={rawValue}>{value}</data>\n          </div>\n        );\n    }\n  };\n\n  return <div>{renderSingleMetric()}</div>;\n};\n\nexport default MetricDetails;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;;;AAEA,MAAMC,aAAa,GAAG,QAA+B;EAAA,IAA9B;IAAEC,QAAF;IAAYC;EAAZ,CAA8B;;EACnD,MAAMC,kBAAkB,GAAG,MAAM;IAC/B;IACA,MAAMC,QAAQ,GAAGL,UAAU,CAACE,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEI,UAAV,CAAqBC,MAAtB,CAAV,CAAwCJ,MAAM,CAACK,KAA/C,CAAjB;IACA,MAAMC,KAAK,GAAGN,MAAM,CAACO,MAAP,CAAcL,QAAd,CAAd;;IAEA,QAAQF,MAAM,CAACQ,IAAf;MACE,KAAK,KAAL;QACE,oBAAO,QAAC,GAAD;UAAK,QAAQ,EAAEN,QAAf;UAAyB,MAAM,EAAEF,MAAjC;UAAyC,EAAE,EAAED,QAAQ,CAACI,UAAT,CAAoBC;QAAjE;UAAA;UAAA;UAAA;QAAA,QAAP;;MACF;QACE,oBACE;UAAA,uBACE;YAAM,KAAK,EAAEF,QAAb;YAAA,UAAwBI;UAAxB;YAAA;YAAA;YAAA;UAAA;QADF,GAAUP,QAAQ,CAACI,UAAT,CAAoBC,MAA9B;UAAA;UAAA;UAAA;QAAA,QADF;IAJJ;EAUD,CAfD;;EAiBA,oBAAO;IAAA,UAAMH,kBAAkB;EAAxB;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAnBD;;KAAMH,a;AAqBN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}