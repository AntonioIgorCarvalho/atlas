{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { useCombobox } from 'downshift';\nimport useMap from '@hook/useMap';\nimport { useHighlightedDistrict } from '@store/district/highlightedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\n\nconst useSearch = featureSearched => {\n  _s();\n\n  var _selected$properties$;\n\n  const inputRef = useRef(null);\n  const {\n    selected,\n    setSelected\n  } = useSelectedDistrict();\n  const {\n    setHighlighted\n  } = useHighlightedDistrict();\n  const {\n    resetMapValues\n  } = useMap();\n  const initialInputValue = (_selected$properties$ = selected === null || selected === void 0 ? void 0 : selected.properties.NM_MUN) !== null && _selected$properties$ !== void 0 ? _selected$properties$ : '';\n\n  const itemToString = item => item ? item.name : '';\n\n  const onSelectedItemChange = item => setSelected(item.selectedItem);\n\n  const {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    openMenu,\n    reset,\n    selectItem,\n    setInputValue\n  } = useCombobox({\n    defaultHighlightedIndex: 0,\n    initialInputValue,\n    items: featureSearched,\n    itemToString,\n    onSelectedItemChange,\n    onInputValueChange: _ref => {\n      let {\n        inputValue: input,\n        type\n      } = _ref;\n\n      if (input === '' && type === useCombobox.stateChangeTypes.InputChange) {\n        resetMapValues();\n      } else if (isOpen && input !== '') {\n        const definiteMatch = featureSearched.find(item => item.properties.NM_MUN === input);\n\n        if (definiteMatch) {\n          selectItem(definiteMatch);\n        }\n      }\n    },\n    onHighlightedIndexChange: _ref2 => {\n      let {\n        highlightedIndex: highlightID,\n        type\n      } = _ref2;\n\n      switch (type) {\n        case useCombobox.stateChangeTypes.ItemClick:\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.FunctionSelectItem:\n          break;\n\n        default:\n          //@ts-ignore\n          setHighlighted(featureSearched[highlightID]);\n      }\n    },\n    stateReducer: (state, actionAndChanges) => {\n      const {\n        type,\n        changes\n      } = actionAndChanges;\n\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur:\n          return { ...changes,\n            //@ts-ignore\n            inputValue: initialInputValue,\n            selectedItem: state.selectedItem\n          };\n\n        default:\n          return changes;\n      }\n    }\n  });\n\n  const cleanSearchBar = () => {\n    resetMapValues();\n    reset();\n  };\n\n  const inputProps = { ...getInputProps({\n      onFocus: () => {\n        if (!isOpen) {\n          console.log('Leo');\n          openMenu();\n        }\n      },\n      placeholder: 'Pesquise por regiões',\n      spellCheck: 'false',\n      ref: inputRef\n    })\n  };\n  return {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    inputProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    openMenu,\n    reset,\n    cleanSearchBar,\n    selectItem,\n    setInputValue\n  };\n};\n\n_s(useSearch, \"6oK9nFOckDxz2+1dBhXin6LlzPk=\", false, function () {\n  return [useSelectedDistrict, useHighlightedDistrict, useMap, useCombobox];\n});\n\nuseSearch.defaultProps = {\n  cfeatureSearched: []\n};\nexport default useSearch;","map":{"version":3,"names":["useRef","useCombobox","useMap","useHighlightedDistrict","useSelectedDistrict","useSearch","featureSearched","inputRef","selected","setSelected","setHighlighted","resetMapValues","initialInputValue","properties","NM_MUN","itemToString","item","name","onSelectedItemChange","selectedItem","getComboboxProps","getInputProps","getItemProps","getMenuProps","getToggleButtonProps","highlightedIndex","inputValue","isOpen","openMenu","reset","selectItem","setInputValue","defaultHighlightedIndex","items","onInputValueChange","input","type","stateChangeTypes","InputChange","definiteMatch","find","onHighlightedIndexChange","highlightID","ItemClick","InputKeyDownEnter","FunctionSelectItem","stateReducer","state","actionAndChanges","changes","InputBlur","cleanSearchBar","inputProps","onFocus","console","log","placeholder","spellCheck","ref","defaultProps","cfeatureSearched"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Header/SearchBar/hook/useSearch.ts"],"sourcesContent":["import { useRef } from 'react';\n\nimport { useCombobox } from 'downshift';\n\nimport useMap from '@hook/useMap';\n\nimport { useHighlightedDistrict } from '@store/district/highlightedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\nimport { District } from '@customTypes/feature';\n\nconst useSearch = (featureSearched: District[]) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { selected, setSelected } = useSelectedDistrict();\n  const { setHighlighted } = useHighlightedDistrict();\n  const { resetMapValues } = useMap();\n\n  const initialInputValue = selected?.properties.NM_MUN ?? '';\n\n  const itemToString = (item: any) => (item ? item.name : '');\n\n  const onSelectedItemChange = (item: any) => setSelected(item.selectedItem);\n\n  const {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    openMenu,\n    reset,\n    selectItem,\n    setInputValue,\n  } = useCombobox({\n    defaultHighlightedIndex: 0,\n    initialInputValue,\n    items: featureSearched,\n    itemToString,\n    onSelectedItemChange,\n\n    onInputValueChange: ({ inputValue: input, type }) => {\n      if (input === '' && type === useCombobox.stateChangeTypes.InputChange) {\n        resetMapValues();\n      } else if (isOpen && input !== '') {\n        const definiteMatch = featureSearched.find((item) => item.properties.NM_MUN === input);\n\n        if (definiteMatch) {\n          selectItem(definiteMatch);\n        }\n      }\n    },\n\n    onHighlightedIndexChange: ({ highlightedIndex: highlightID, type }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.ItemClick:\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.FunctionSelectItem:\n          break;\n        default:\n          //@ts-ignore\n          setHighlighted(featureSearched[highlightID]);\n      }\n    },\n\n    stateReducer: (state, actionAndChanges) => {\n      const { type, changes } = actionAndChanges;\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur:\n          return {\n            ...changes,\n            //@ts-ignore\n            inputValue: initialInputValue,\n            selectedItem: state.selectedItem,\n          };\n        default:\n          return changes;\n      }\n    },\n  });\n\n  const cleanSearchBar = () => {\n    resetMapValues();\n    reset();\n  };\n\n  const inputProps = {\n    ...getInputProps({\n      onFocus: () => {\n        if (!isOpen) {\n          console.log('Leo');\n          openMenu();\n        }\n      },\n      placeholder: 'Pesquise por regiões',\n      spellCheck: 'false',\n      ref: inputRef,\n    }),\n  };\n\n  return {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    inputProps,\n    highlightedIndex,\n    inputValue,\n    isOpen,\n    openMenu,\n    reset,\n    cleanSearchBar,\n    selectItem,\n    setInputValue,\n  };\n};\n\nuseSearch.defaultProps = {\n  cfeatureSearched: [],\n};\n\nexport default useSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}