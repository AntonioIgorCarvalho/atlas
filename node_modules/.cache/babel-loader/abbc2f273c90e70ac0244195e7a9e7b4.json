{"ast":null,"code":"import * as turf from '@turf/turf';\nimport { hoveredPopup } from '../../const';\nlet hoveredId;\nlet clickedId;\n\nfunction addPopup(feature, map) {\n  var _feature$properties;\n\n  const coordinates = turf.centerOfMass(feature).geometry.coordinates;\n  const regionName = feature === null || feature === void 0 ? void 0 : (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.NM_UF;\n  hoveredPopup.trackPointer().setHTML(`<h5>${regionName}</h5>`).addTo(map);\n}\n\nfunction setFeatureHover(featureID, map, state) {\n  map.setFeatureState({\n    source: 'state',\n    id: featureID\n  }, {\n    hover: state\n  });\n}\n\nfunction setFeatureClick(featureID, map, state) {\n  map.setFeatureState({\n    source: 'state',\n    id: featureID\n  }, {\n    hover: state\n  });\n}\n\nexport function clickState(feature, map) {\n  var _feature$properties2;\n\n  const stateID = feature === null || feature === void 0 ? void 0 : (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === clickedId) {\n      return;\n    }\n\n    if (clickedId) {\n      setFeatureClick(clickedId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureClick(stateID, map, true);\n      clickedId = stateID;\n    }\n  } else if (clickedId) {\n    if (map.getSource('state')) {\n      setFeatureClick(clickedId, map, false);\n    }\n\n    clickedId = undefined;\n  }\n}\nexport function highlightState(feature, map) {\n  var _feature$properties3;\n\n  const stateID = feature === null || feature === void 0 ? void 0 : (_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === hoveredId) {\n      return;\n    }\n\n    addPopup(feature, map);\n\n    if (hoveredId) {\n      setFeatureHover(hoveredId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureHover(stateID, map, true);\n      hoveredId = stateID;\n    }\n  } else if (hoveredId) {\n    hoveredPopup.remove();\n\n    if (map.getSource('state')) {\n      setFeatureHover(hoveredId, map, false);\n    }\n\n    hoveredId = undefined;\n  }\n}\nexport function isStateLayerVisible(map, visible) {\n  const visibility = visible ? 'visible' : 'none';\n\n  if (map.getLayer('fill-state')) {\n    map.setLayoutProperty('fill-state', 'visibility', visibility);\n  }\n\n  if (map.getLayer('state-borders')) {\n    map.setLayoutProperty('state-borders', 'visibility', visibility);\n  }\n}\nexport function cleanStateActions() {\n  hoveredPopup.remove();\n  clickedId = 0;\n  hoveredId = undefined;\n}\nexport function fitStateBounds(feature, map) {\n  if (feature && (feature.geometry || feature._geometry)) {\n    const [minX, minY, maxX, maxY] = turf.bbox(feature);\n    feature.geometry.coordinates;\n    map.fitBounds([[minX, minY], [maxX, maxY]], {\n      padding: {\n        top: 100,\n        bottom: 100,\n        left: 200,\n        right: 200\n      }\n    });\n  }\n}","map":{"version":3,"names":["turf","hoveredPopup","hoveredId","clickedId","addPopup","feature","map","coordinates","centerOfMass","geometry","regionName","properties","NM_UF","trackPointer","setHTML","addTo","setFeatureHover","featureID","state","setFeatureState","source","id","hover","setFeatureClick","clickState","stateID","CD_UF","getSource","undefined","highlightState","remove","isStateLayerVisible","visible","visibility","getLayer","setLayoutProperty","cleanStateActions","fitStateBounds","_geometry","minX","minY","maxX","maxY","bbox","fitBounds","padding","top","bottom","left","right"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Map/hook/useStateLayer/stateActions.ts"],"sourcesContent":["import * as turf from '@turf/turf';\nimport mapboxgl from 'mapbox-gl';\n\nimport { State } from '@customTypes/feature';\n\nimport { hoveredPopup } from '../../const';\n\nlet hoveredId: number | undefined;\nlet clickedId: number | undefined;\n\ntype Feature = State | null;\n\nfunction addPopup(feature: Feature, map: mapboxgl.Map) {\n  const coordinates = turf.centerOfMass(feature).geometry.coordinates;\n  const regionName = feature?.properties?.NM_UF;\n\n  hoveredPopup.trackPointer().setHTML(`<h5>${regionName}</h5>`).addTo(map);\n}\n\nfunction setFeatureHover(featureID: number, map: mapboxgl.Map, state: boolean) {\n  map.setFeatureState({ source: 'state', id: featureID }, { hover: state });\n}\n\nfunction setFeatureClick(featureID: number, map: mapboxgl.Map, state: boolean) {\n  map.setFeatureState({ source: 'state', id: featureID }, { hover: state });\n}\n\nexport function clickState(feature: Feature, map: mapboxgl.Map) {\n  const stateID = feature?.properties?.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === clickedId) {\n      return;\n    }\n\n    if (clickedId) {\n      setFeatureClick(clickedId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureClick(stateID, map, true);\n      clickedId = stateID;\n    }\n  } else if (clickedId) {\n    if (map.getSource('state')) {\n      setFeatureClick(clickedId, map, false);\n    }\n    clickedId = undefined;\n  }\n}\n\nexport function highlightState(feature: Feature, map: mapboxgl.Map) {\n  const stateID = feature?.properties?.CD_UF;\n\n  if (feature && feature.geometry) {\n    if (stateID === hoveredId) {\n      return;\n    }\n\n    addPopup(feature, map);\n\n    if (hoveredId) {\n      setFeatureHover(hoveredId, map, false);\n    }\n\n    if (stateID) {\n      setFeatureHover(stateID, map, true);\n      hoveredId = stateID;\n    }\n  } else if (hoveredId) {\n    hoveredPopup.remove();\n\n    if (map.getSource('state')) {\n      setFeatureHover(hoveredId, map, false);\n    }\n    hoveredId = undefined;\n  }\n}\n\nexport function isStateLayerVisible(map: mapboxgl.Map, visible: boolean) {\n  const visibility = visible ? 'visible' : 'none';\n\n  if (map.getLayer('fill-state')) {\n    map.setLayoutProperty('fill-state', 'visibility', visibility);\n  }\n\n  if (map.getLayer('state-borders')) {\n    map.setLayoutProperty('state-borders', 'visibility', visibility);\n  }\n}\n\nexport function cleanStateActions() {\n  hoveredPopup.remove();\n  clickedId = 0;\n  hoveredId = undefined;\n}\n\nexport function fitStateBounds(feature: Feature, map: mapboxgl.Map) {\n  if (feature && (feature.geometry || feature._geometry)) {\n    const [minX, minY, maxX, maxY] = turf.bbox(feature);\n\n    feature.geometry.coordinates;\n\n    map.fitBounds(\n      [\n        [minX, minY],\n        [maxX, maxY],\n      ],\n      {\n        padding: { top: 100, bottom: 100, left: 200, right: 200 },\n      },\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}