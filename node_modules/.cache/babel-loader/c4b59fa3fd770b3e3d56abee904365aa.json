{"ast":null,"code":"import _slicedToArray from\"/Users/leonardogomes/Documents/atlas/atlas/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import useMap from'@hook/useMap';import{useSelectedState}from'@store/state/selectedContext';import{useSelectedDistrict}from'@store/district/selectedContext';import{Button}from'@mui/material';import ChevronLeftIcon from'@mui/icons-material/ChevronLeft';import*as Styles from'./styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LayerRoute=function LayerRoute(){var _useState=useState('country'),_useState2=_slicedToArray(_useState,2),selectedLayer=_useState2[0],setSelectedLayer=_useState2[1];var _useMap=useMap(),resetMapValues=_useMap.resetMapValues,resetDistrictValues=_useMap.resetDistrictValues;var _useSelectedState=useSelectedState(),selectedState=_useSelectedState.selected;var _useSelectedDistrict=useSelectedDistrict(),selected=_useSelectedDistrict.selected;useEffect(function(){if(selected){setSelectedLayer('district');}else if(selectedState&&!selected){setSelectedLayer('state');}else{setSelectedLayer('country');}},[selected,selectedState]);var returnPath=function returnPath(){if(selectedLayer==='district'){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Styles.NextLayer,{children:\"-\"}),/*#__PURE__*/_jsx(Button,{className:\"place state\",onClick:function onClick(){return resetDistrictValues();},children:selectedState===null||selectedState===void 0?void 0:selectedState.properties.NM_UF}),/*#__PURE__*/_jsx(Styles.NextLayer,{children:\"-\"}),/*#__PURE__*/_jsx(Button,{className:\"place district\",children:selected===null||selected===void 0?void 0:selected.properties.NM_MUN})]});}else if(selectedLayer==='state'){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Styles.NextLayer,{children:\"-\"}),/*#__PURE__*/_jsx(Button,{className:\"place state\",onClick:function onClick(){return resetDistrictValues();},children:selectedState===null||selectedState===void 0?void 0:selectedState.properties.NM_UF})]});}};var returnToPreviousLayer=function returnToPreviousLayer(){if(selectedLayer==='district'){resetDistrictValues();}else if(selectedLayer==='state'){resetMapValues();}};var returnPathButton=function returnPathButton(){if(selectedLayer!=='country'){return/*#__PURE__*/_jsx(Styles.ReturnRouteButton,{onClick:function onClick(){return returnToPreviousLayer();},children:/*#__PURE__*/_jsx(ChevronLeftIcon,{sx:{color:'black'}})});}};return/*#__PURE__*/_jsxs(Styles.ReturnRoute,{selectedLayer:selectedLayer,children:[returnPathButton(),/*#__PURE__*/_jsx(Button,{className:\"place country\",onClick:function onClick(){return resetMapValues();},children:\"Brasil\"}),returnPath()]});};export default LayerRoute;","map":{"version":3,"names":["React","useEffect","useState","useMap","useSelectedState","useSelectedDistrict","Button","ChevronLeftIcon","Styles","LayerRoute","selectedLayer","setSelectedLayer","resetMapValues","resetDistrictValues","selectedState","selected","returnPath","properties","NM_UF","NM_MUN","returnToPreviousLayer","returnPathButton","color"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Header/LayerRoute/LayerRoute.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport useMap from '@hook/useMap';\nimport { useSelectedState } from '@store/state/selectedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\n\nimport { Button } from '@mui/material';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\n\nimport * as Styles from './styles';\n\nconst LayerRoute = () => {\n  const [selectedLayer, setSelectedLayer] = useState('country');\n\n  const { resetMapValues, resetDistrictValues } = useMap();\n  const { selected: selectedState } = useSelectedState();\n  const { selected } = useSelectedDistrict();\n\n  useEffect(() => {\n    if (selected) {\n      setSelectedLayer('district');\n    } else if (selectedState && !selected) {\n      setSelectedLayer('state');\n    } else {\n      setSelectedLayer('country');\n    }\n  }, [selected, selectedState]);\n\n  const returnPath = () => {\n    if (selectedLayer === 'district') {\n      return (\n        <>\n          <Styles.NextLayer>-</Styles.NextLayer>\n          <Button className=\"place state\" onClick={() => resetDistrictValues()}>\n            {selectedState?.properties.NM_UF}\n          </Button>\n          <Styles.NextLayer>-</Styles.NextLayer>\n          <Button className=\"place district\">{selected?.properties.NM_MUN}</Button>\n        </>\n      );\n    } else if (selectedLayer === 'state') {\n      return (\n        <>\n          <Styles.NextLayer>-</Styles.NextLayer>\n          <Button className=\"place state\" onClick={() => resetDistrictValues()}>\n            {selectedState?.properties.NM_UF}\n          </Button>\n        </>\n      );\n    }\n  };\n\n  const returnToPreviousLayer = () => {\n    if (selectedLayer === 'district') {\n      resetDistrictValues();\n    } else if (selectedLayer === 'state') {\n      resetMapValues();\n    }\n  };\n\n  const returnPathButton = () => {\n    if (selectedLayer !== 'country') {\n      return (\n        <Styles.ReturnRouteButton onClick={() => returnToPreviousLayer()}>\n          <ChevronLeftIcon sx={{ color: 'black' }} />\n        </Styles.ReturnRouteButton>\n      );\n    }\n  };\n\n  return (\n    <Styles.ReturnRoute selectedLayer={selectedLayer}>\n      {returnPathButton()}\n      <Button className=\"place country\" onClick={() => resetMapValues()}>\n        Brasil\n      </Button>\n      {returnPath()}\n    </Styles.ReturnRoute>\n  );\n};\n\nexport default LayerRoute;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}