{"ast":null,"code":"var _jsxFileName = \"/Users/leonardogomes/Documents/atlas/atlas/src/components/Header/LayerRoute/LayerRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useMap from '@hook/useMap';\nimport { useSelectedState } from '@store/state/selectedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\nimport { Button } from '@mui/material';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport * as Styles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LayerRoute = () => {\n  _s();\n\n  const [selectedLayer, setSelectedLayer] = useState('country');\n  const {\n    resetMapValues,\n    resetDistrictValues\n  } = useMap();\n  const {\n    selected: selectedState\n  } = useSelectedState();\n  const {\n    selected\n  } = useSelectedDistrict();\n  useEffect(() => {\n    if (selected) {\n      setSelectedLayer('district');\n    } else if (selectedState && !selected) {\n      setSelectedLayer('state');\n    } else {\n      setSelectedLayer('country');\n    }\n  }, [selected, selectedState]);\n\n  const returnPath = () => {\n    if (selectedLayer === 'district') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Styles.NextLayer, {\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"place state\",\n          onClick: () => resetDistrictValues(),\n          children: selectedState === null || selectedState === void 0 ? void 0 : selectedState.properties.NM_UF\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Styles.NextLayer, {\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"place district\",\n          children: selected === null || selected === void 0 ? void 0 : selected.properties.NM_MUN\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else if (selectedLayer === 'state') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Styles.NextLayer, {\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"place state\",\n          onClick: () => resetDistrictValues(),\n          children: selectedState === null || selectedState === void 0 ? void 0 : selectedState.properties.NM_UF\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  };\n\n  const returnToPreviousLayer = () => {\n    if (selectedLayer === 'district') {\n      resetDistrictValues();\n    } else if (selectedLayer === 'state') {\n      resetMapValues();\n    }\n  };\n\n  const returnPathButton = () => {\n    if (selectedLayer !== 'country') {\n      return /*#__PURE__*/_jsxDEV(Styles.ReturnRouteButton, {\n        onClick: () => returnToPreviousLayer(),\n        children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n          sx: {\n            color: 'black'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Styles.ReturnRoute, {\n    selectedLayer: selectedLayer,\n    children: [returnPathButton(), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"place country\",\n      onClick: () => resetMapValues(),\n      children: \"Brasil\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), returnPath()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LayerRoute, \"a/HeGJjtzb433zeZB/9uXWEa5UY=\", false, function () {\n  return [useMap, useSelectedState, useSelectedDistrict];\n});\n\n_c = LayerRoute;\nexport default LayerRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayerRoute\");","map":{"version":3,"names":["React","useEffect","useState","useMap","useSelectedState","useSelectedDistrict","Button","ChevronLeftIcon","Styles","LayerRoute","selectedLayer","setSelectedLayer","resetMapValues","resetDistrictValues","selected","selectedState","returnPath","properties","NM_UF","NM_MUN","returnToPreviousLayer","returnPathButton","color"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Header/LayerRoute/LayerRoute.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport useMap from '@hook/useMap';\nimport { useSelectedState } from '@store/state/selectedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\n\nimport { Button } from '@mui/material';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\n\nimport * as Styles from './styles';\n\nconst LayerRoute = () => {\n  const [selectedLayer, setSelectedLayer] = useState('country');\n\n  const { resetMapValues, resetDistrictValues } = useMap();\n  const { selected: selectedState } = useSelectedState();\n  const { selected } = useSelectedDistrict();\n\n  useEffect(() => {\n    if (selected) {\n      setSelectedLayer('district');\n    } else if (selectedState && !selected) {\n      setSelectedLayer('state');\n    } else {\n      setSelectedLayer('country');\n    }\n  }, [selected, selectedState]);\n\n  const returnPath = () => {\n    if (selectedLayer === 'district') {\n      return (\n        <>\n          <Styles.NextLayer>-</Styles.NextLayer>\n          <Button className=\"place state\" onClick={() => resetDistrictValues()}>\n            {selectedState?.properties.NM_UF}\n          </Button>\n          <Styles.NextLayer>-</Styles.NextLayer>\n          <Button className=\"place district\">{selected?.properties.NM_MUN}</Button>\n        </>\n      );\n    } else if (selectedLayer === 'state') {\n      return (\n        <>\n          <Styles.NextLayer>-</Styles.NextLayer>\n          <Button className=\"place state\" onClick={() => resetDistrictValues()}>\n            {selectedState?.properties.NM_UF}\n          </Button>\n        </>\n      );\n    }\n  };\n\n  const returnToPreviousLayer = () => {\n    if (selectedLayer === 'district') {\n      resetDistrictValues();\n    } else if (selectedLayer === 'state') {\n      resetMapValues();\n    }\n  };\n\n  const returnPathButton = () => {\n    if (selectedLayer !== 'country') {\n      return (\n        <Styles.ReturnRouteButton onClick={() => returnToPreviousLayer()}>\n          <ChevronLeftIcon sx={{ color: 'black' }} />\n        </Styles.ReturnRouteButton>\n      );\n    }\n  };\n\n  return (\n    <Styles.ReturnRoute selectedLayer={selectedLayer}>\n      {returnPathButton()}\n      <Button className=\"place country\" onClick={() => resetMapValues()}>\n        Brasil\n      </Button>\n      {returnPath()}\n    </Styles.ReturnRoute>\n  );\n};\n\nexport default LayerRoute;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}