{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport geojsonURL from '@data/BR_UF_2020.json';\nimport { useSelectedState } from '@store/state/selectedContext';\nimport { useHighlightedState } from '@store/state/highlightedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\nimport { highlightState, clickState, isStateLayerVisible, cleanStateActions, fitStateCenter, addPopup } from './stateActions';\nimport { stateColors } from './const';\nimport { fitCenter } from '../../actions';\nimport { lineOpacity, lineWidth, fillOpacity } from '../../const';\nimport { isDistrictLayerVisible } from '../useDistrictLayer/districtActions';\n\nconst useStateLayer = () => {\n  _s();\n\n  const [stateReference, setStateReference] = useState();\n  const [latLng, setLatLng] = useState();\n  const {\n    setHighlighted: setHighlightedState,\n    highlighted: highlightedState\n  } = useHighlightedState();\n  const {\n    setSelected: setSelectedState,\n    selected: selectedState\n  } = useSelectedState();\n  const {\n    selected: selectedDistrict\n  } = useSelectedDistrict();\n\n  function initLayers(reference) {\n    reference.on('load', () => {\n      reference.addSource('state', {\n        type: 'geojson',\n        //@ts-ignore\n        data: geojsonURL,\n        //@ts-ignore\n        promoteId: 'CD_UF'\n      });\n      reference.addLayer({\n        id: 'fill-state',\n        type: 'fill',\n        source: 'state',\n        layout: {\n          visibility: 'visible'\n        },\n        paint: {\n          'fill-color': {\n            property: 'POPULATION',\n            stops: stateColors\n          },\n          //@ts-ignore\n          'fill-opacity': fillOpacity\n        }\n      });\n      reference.addLayer({\n        id: 'state-borders',\n        type: 'line',\n        source: 'state',\n        layout: {\n          visibility: 'visible'\n        },\n        paint: {\n          'line-color': '#ffffff',\n          //@ts-ignore\n          'line-width': lineWidth,\n          //@ts-ignore\n          'line-opacity': lineOpacity\n        }\n      });\n    });\n  }\n\n  function initActions(reference) {\n    reference.on('click', 'fill-state', e => {\n      if (e.features.length > 0) {\n        setSelectedState(e.features[0]);\n        setLatLng(e.lngLat);\n      }\n    });\n    reference.on('mousemove', 'fill-state', e => {\n      if (e.features.length > 0) {\n        setHighlightedState(e.features[0]);\n        setLatLng(e.lngLat);\n      }\n    });\n    reference.on('mouseleave', 'fill-state', () => {\n      setHighlightedState(null);\n    });\n  }\n\n  useEffect(() => {\n    if (stateReference) {\n      initLayers(stateReference);\n      initActions(stateReference);\n    }\n  }, [stateReference]);\n  useEffect(() => {\n    if (stateReference) {\n      highlightState(highlightedState, stateReference);\n      if (latLng) addPopup(highlightedState, stateReference, latLng, 'Hover');\n      setLatLng(undefined);\n    }\n  }, [highlightedState]);\n  useEffect(() => {\n    if (stateReference && !selectedDistrict) {\n      clickState(selectedState, stateReference);\n\n      if (selectedState) {\n        console.log(latLng);\n        fitStateCenter(selectedState, stateReference);\n        if (latLng) addPopup(selectedState, stateReference, latLng, 'Click');\n        setLatLng(undefined);\n      } else {\n        fitCenter(stateReference);\n        isDistrictLayerVisible(stateReference, false);\n        isStateLayerVisible(stateReference, true);\n        cleanStateActions();\n      }\n    }\n  }, [selectedState, stateReference]);\n  return {\n    initLayers,\n    initActions,\n    setStateReference,\n    stateReference\n  };\n};\n\n_s(useStateLayer, \"hFzU42sHzzIwUBSWa9pf16ewOWM=\", false, function () {\n  return [useHighlightedState, useSelectedState, useSelectedDistrict];\n});\n\nexport default useStateLayer;","map":{"version":3,"names":["useEffect","useState","geojsonURL","useSelectedState","useHighlightedState","useSelectedDistrict","highlightState","clickState","isStateLayerVisible","cleanStateActions","fitStateCenter","addPopup","stateColors","fitCenter","lineOpacity","lineWidth","fillOpacity","isDistrictLayerVisible","useStateLayer","stateReference","setStateReference","latLng","setLatLng","setHighlighted","setHighlightedState","highlighted","highlightedState","setSelected","setSelectedState","selected","selectedState","selectedDistrict","initLayers","reference","on","addSource","type","data","promoteId","addLayer","id","source","layout","visibility","paint","property","stops","initActions","e","features","length","lngLat","undefined","console","log"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Map/hook/useStateLayer/useStateLayer.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport mapboxgl from 'mapbox-gl';\n\nimport geojsonURL from '@data/BR_UF_2020.json';\n\nimport { useSelectedState } from '@store/state/selectedContext';\nimport { useHighlightedState } from '@store/state/highlightedContext';\nimport { useSelectedDistrict } from '@store/district/selectedContext';\n\nimport {\n  highlightState,\n  clickState,\n  isStateLayerVisible,\n  cleanStateActions,\n  fitStateCenter,\n  addPopup,\n} from './stateActions';\n\nimport { stateColors } from './const';\nimport { fitCenter } from '../../actions';\nimport { lineOpacity, lineWidth, fillOpacity } from '../../const';\nimport { isDistrictLayerVisible } from '../useDistrictLayer/districtActions';\n\nconst useStateLayer = () => {\n  const [stateReference, setStateReference] = useState<mapboxgl.Map>();\n  const [latLng, setLatLng] = useState<mapboxgl.LngLat>();\n\n  const { setHighlighted: setHighlightedState, highlighted: highlightedState } = useHighlightedState();\n  const { setSelected: setSelectedState, selected: selectedState } = useSelectedState();\n  const { selected: selectedDistrict } = useSelectedDistrict();\n\n  function initLayers(reference: mapboxgl.Map) {\n    reference.on('load', () => {\n      reference.addSource('state', {\n        type: 'geojson',\n        //@ts-ignore\n        data: geojsonURL,\n        //@ts-ignore\n        promoteId: 'CD_UF',\n      });\n\n      reference.addLayer({\n        id: 'fill-state',\n        type: 'fill',\n        source: 'state',\n        layout: {\n          visibility: 'visible',\n        },\n        paint: {\n          'fill-color': {\n            property: 'POPULATION',\n            stops: stateColors,\n          },\n          //@ts-ignore\n          'fill-opacity': fillOpacity,\n        },\n      });\n\n      reference.addLayer({\n        id: 'state-borders',\n        type: 'line',\n        source: 'state',\n        layout: {\n          visibility: 'visible',\n        },\n        paint: {\n          'line-color': '#ffffff',\n          //@ts-ignore\n          'line-width': lineWidth,\n          //@ts-ignore\n          'line-opacity': lineOpacity,\n        },\n      });\n    });\n  }\n\n  function initActions(reference: mapboxgl.Map) {\n    reference.on('click', 'fill-state', (e: any) => {\n      if (e.features.length > 0) {\n        setSelectedState(e.features[0]);\n        setLatLng(e.lngLat);\n      }\n    });\n\n    reference.on('mousemove', 'fill-state', (e: any) => {\n      if (e.features.length > 0) {\n        setHighlightedState(e.features[0]);\n        setLatLng(e.lngLat);\n      }\n    });\n\n    reference.on('mouseleave', 'fill-state', () => {\n      setHighlightedState(null);\n    });\n  }\n\n  useEffect(() => {\n    if (stateReference) {\n      initLayers(stateReference);\n      initActions(stateReference);\n    }\n  }, [stateReference]);\n\n  useEffect(() => {\n    if (stateReference) {\n      highlightState(highlightedState, stateReference);\n      if (latLng) addPopup(highlightedState, stateReference, latLng, 'Hover');\n      setLatLng(undefined);\n    }\n  }, [highlightedState]);\n\n  useEffect(() => {\n    if (stateReference && !selectedDistrict) {\n      clickState(selectedState, stateReference);\n\n      if (selectedState) {\n        console.log(latLng);\n        fitStateCenter(selectedState, stateReference);\n        if (latLng) addPopup(selectedState, stateReference, latLng, 'Click');\n        setLatLng(undefined);\n      } else {\n        fitCenter(stateReference);\n\n        isDistrictLayerVisible(stateReference, false);\n        isStateLayerVisible(stateReference, true);\n\n        cleanStateActions();\n      }\n    }\n  }, [selectedState, stateReference]);\n\n  return {\n    initLayers,\n    initActions,\n    setStateReference,\n    stateReference,\n  };\n};\n\nexport default useStateLayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}