{"ast":null,"code":"import _slicedToArray from\"/Users/leonardogomes/Documents/atlas/atlas/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState}from'react';import geojsonURL from'@data/BR_UF_2020.json';import{useSelectedState}from'@store/state/selectedContext';import{useHighlightedState}from'@store/state/highlightedContext';import{highlightState,clickState,isStateLayerVisible,cleanStateActions,fitStateCenter}from'./stateActions';import{fitCenter}from'../../actions';import{stateColors}from'./const';import{lineOpacity,lineWidth,fillOpacity}from'../../const';import{isDistrictLayerVisible}from'../useDistrictLayer/districtActions';var useStateLayer=function useStateLayer(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),stateReference=_useState2[0],setStateReference=_useState2[1];var _useHighlightedState=useHighlightedState(),setHighlightedState=_useHighlightedState.setHighlighted,highlightedState=_useHighlightedState.highlighted;var _useSelectedState=useSelectedState(),setSelectedState=_useSelectedState.setSelected,selectedState=_useSelectedState.selected;function initLayers(reference){reference.on('load',function(){reference.addSource('state',{type:'geojson',//@ts-ignore\ndata:geojsonURL,//@ts-ignore\npromoteId:'CD_UF'});reference.addLayer({id:'fill-state',type:'fill',source:'state',layout:{visibility:'visible'},paint:{'fill-color':{property:'POPULATION',stops:stateColors},//@ts-ignore\n'fill-opacity':fillOpacity}});reference.addLayer({id:'state-borders',type:'line',source:'state',layout:{visibility:'visible'},paint:{'line-color':'#ffffff',//@ts-ignore\n'line-width':lineWidth,//@ts-ignore\n'line-opacity':lineOpacity}});});}function initActions(reference){reference.on('click','fill-state',function(e){if(e.features.length>0){setSelectedState(e.features[0]);}});reference.on('mousemove','fill-state',function(e){if(e.features.length>0){setHighlightedState(e.features[0]);}});reference.on('mouseleave','fill-state',function(){setHighlightedState(null);});}useEffect(function(){if(stateReference){initLayers(stateReference);initActions(stateReference);}},[stateReference]);useEffect(function(){if(stateReference){highlightState(highlightedState,stateReference);}},[highlightedState]);useEffect(function(){if(stateReference&&selectedState!==null){clickState(selectedState,stateReference);fitStateCenter(selectedState,stateReference);}else if(stateReference){clickState(null,stateReference);fitCenter(stateReference);isDistrictLayerVisible(stateReference,false);isStateLayerVisible(stateReference,true);cleanStateActions();}},[selectedState,stateReference]);return{initLayers:initLayers,initActions:initActions,setStateReference:setStateReference,stateReference:stateReference};};export default useStateLayer;","map":{"version":3,"names":["useEffect","useState","geojsonURL","useSelectedState","useHighlightedState","highlightState","clickState","isStateLayerVisible","cleanStateActions","fitStateCenter","fitCenter","stateColors","lineOpacity","lineWidth","fillOpacity","isDistrictLayerVisible","useStateLayer","stateReference","setStateReference","setHighlightedState","setHighlighted","highlightedState","highlighted","setSelectedState","setSelected","selectedState","selected","initLayers","reference","on","addSource","type","data","promoteId","addLayer","id","source","layout","visibility","paint","property","stops","initActions","e","features","length"],"sources":["/Users/leonardogomes/Documents/atlas/atlas/src/components/Map/hook/useStateLayer/useStateLayer.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport mapboxgl from 'mapbox-gl';\n\nimport geojsonURL from '@data/BR_UF_2020.json';\n\nimport { useSelectedState } from '@store/state/selectedContext';\nimport { useHighlightedState } from '@store/state/highlightedContext';\n\nimport { highlightState, clickState, isStateLayerVisible, cleanStateActions, fitStateCenter } from './stateActions';\n\nimport { fitCenter } from '../../actions';\nimport { stateColors } from './const';\nimport { lineOpacity, lineWidth, fillOpacity } from '../../const';\nimport { isDistrictLayerVisible } from '../useDistrictLayer/districtActions';\n\nconst useStateLayer = () => {\n  const [stateReference, setStateReference] = useState<mapboxgl.Map>();\n\n  const { setHighlighted: setHighlightedState, highlighted: highlightedState } = useHighlightedState();\n  const { setSelected: setSelectedState, selected: selectedState } = useSelectedState();\n\n  function initLayers(reference: mapboxgl.Map) {\n    reference.on('load', () => {\n      reference.addSource('state', {\n        type: 'geojson',\n        //@ts-ignore\n        data: geojsonURL,\n        //@ts-ignore\n        promoteId: 'CD_UF',\n      });\n\n      reference.addLayer({\n        id: 'fill-state',\n        type: 'fill',\n        source: 'state',\n        layout: {\n          visibility: 'visible',\n        },\n        paint: {\n          'fill-color': {\n            property: 'POPULATION',\n            stops: stateColors,\n          },\n          //@ts-ignore\n          'fill-opacity': fillOpacity,\n        },\n      });\n\n      reference.addLayer({\n        id: 'state-borders',\n        type: 'line',\n        source: 'state',\n        layout: {\n          visibility: 'visible',\n        },\n        paint: {\n          'line-color': '#ffffff',\n          //@ts-ignore\n          'line-width': lineWidth,\n          //@ts-ignore\n          'line-opacity': lineOpacity,\n        },\n      });\n    });\n  }\n\n  function initActions(reference: mapboxgl.Map) {\n    reference.on('click', 'fill-state', (e: any) => {\n      if (e.features.length > 0) {\n        setSelectedState(e.features[0]);\n      }\n    });\n\n    reference.on('mousemove', 'fill-state', (e: any) => {\n      if (e.features.length > 0) {\n        setHighlightedState(e.features[0]);\n      }\n    });\n\n    reference.on('mouseleave', 'fill-state', () => {\n      setHighlightedState(null);\n    });\n  }\n\n  useEffect(() => {\n    if (stateReference) {\n      initLayers(stateReference);\n      initActions(stateReference);\n    }\n  }, [stateReference]);\n\n  useEffect(() => {\n    if (stateReference) {\n      highlightState(highlightedState, stateReference);\n    }\n  }, [highlightedState]);\n\n  useEffect(() => {\n    if (stateReference && selectedState !== null) {\n      clickState(selectedState, stateReference);\n      fitStateCenter(selectedState, stateReference);\n    } else if (stateReference) {\n      clickState(null, stateReference);\n\n      fitCenter(stateReference);\n\n      isDistrictLayerVisible(stateReference, false);\n      isStateLayerVisible(stateReference, true);\n\n      cleanStateActions();\n    }\n  }, [selectedState, stateReference]);\n\n  return {\n    initLayers,\n    initActions,\n    setStateReference,\n    stateReference,\n  };\n};\n\nexport default useStateLayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}